/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '../../src/sortable.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_SortableContainer = (function () {
    function Wrapper_SortableContainer(p0, p1, p2, p3, p4) {
        this._changed = false;
        this.context = new import0.SortableContainer(p0, p1, p2, p3, p4);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    Wrapper_SortableContainer.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SortableContainer.prototype.ngOnDestroy = function () {
    };
    Wrapper_SortableContainer.prototype.check_draggable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.draggable = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_SortableContainer.prototype.check_sortableData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.sortableData = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_SortableContainer.prototype.check_dropzones = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.dropzones = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_SortableContainer.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SortableContainer.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SortableContainer.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SortableContainer.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SortableContainer;
}());
export var Wrapper_SortableComponent = (function () {
    function Wrapper_SortableComponent(p0, p1, p2, p3, p4, p5) {
        this._changed = false;
        this.context = new import0.SortableComponent(p0, p1, p2, p3, p4, p5);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
    }
    Wrapper_SortableComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SortableComponent.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
        (this.subscription3 && this.subscription3.unsubscribe());
        (this.subscription4 && this.subscription4.unsubscribe());
    };
    Wrapper_SortableComponent.prototype.check_index = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.index = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_SortableComponent.prototype.check_draggable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.draggable = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_SortableComponent.prototype.check_droppable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.droppable = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_SortableComponent.prototype.check_dragData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.dragData = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_SortableComponent.prototype.check_effectallowed = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.effectallowed = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_SortableComponent.prototype.check_effectcursor = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.effectcursor = currValue;
            this._expr_5 = currValue;
        }
    };
    Wrapper_SortableComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SortableComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SortableComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_SortableComponent.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2, emit3, emit4) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onDragSuccessCallback.subscribe(_eventHandler.bind(view, 'onDragSuccess')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onDragStartCallback.subscribe(_eventHandler.bind(view, 'onDragStart')));
        }
        if (emit2) {
            (this.subscription2 = this.context.onDragOverCallback.subscribe(_eventHandler.bind(view, 'onDragOver')));
        }
        if (emit3) {
            (this.subscription3 = this.context.onDragEndCallback.subscribe(_eventHandler.bind(view, 'onDragEnd')));
        }
        if (emit4) {
            (this.subscription4 = this.context.onDropSuccessCallback.subscribe(_eventHandler.bind(view, 'onDropSuccess')));
        }
    };
    return Wrapper_SortableComponent;
}());
//# sourceMappingURL=sortable.component.ngfactory.js.map